import time

from telegram import ReplyKeyboardMarkup, ParseMode
from telegram.ext import run_async, JobQueue, Job

from settings import *
from queued_bot import Bot
from bot import job_queue#, view_post_service
from utils import *


@run_async
def primary_instructions(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data["chat_id"],
        text="https://telegra.ph/Osnovnye-voprosy-11-05",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ—á–∏—Ç–∞–ª ‚úÖ"]], True)
    )


@run_async
def start(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data["chat_id"],
        text="–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup([["üóù –ö–ª—é—á–∏", "‚ùì –ü–æ–º–æ—â—å"], ["üî•–ò–≥—Ä—ã —Å 90% —Å–∫–∏–¥–∫–æ–π üî•"]],
                                         resize_keyboard=True)
    )
    return 0


@run_async
def help_msg(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data["chat_id"],
        text="""https://telegra.ph/Osnovnye-voprosy-11-05""",
        parse_mode=ParseMode.HTML
    )


@run_async
def earn(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data["chat_id"],
        text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã", callback_data="subscribe")],
            [InlineKeyboardButton(f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")],
        ])
    )


@run_async
def earn_more(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data["chat_id"],
        text="–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ?\n"
             "–ü—Ä–∏–≥–ª–∞—à–∞–π –ª—é–¥–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ:\n"
             "{link} –∏ –ø–æ–ª—É—á–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ <b>3$ + 10%</b> –æ—Ç –µ–≥–æ –¥–æ—Ö–æ–¥–∞.".format(
            link=get_invitation_link(user_data["id"])
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë", callback_data="earn_more")]
        ]),
        parse_mode=ParseMode.HTML
    )


@run_async
def subscribe_channel(bot: Bot, user_data: dict):
    channel = fetch_channel_to_subscribe(bot, user_data)
    channels = get_channels_for_subscription()
    if len(channels) == 0:
        bot.send_message(
            chat_id=user_data["chat_id"],
            text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        )
        earn_more(bot, user_data)
    elif not check_subs_mode(user_data):
        bot.send_message(
            chat_id=user_data['chat_id'],
            text="–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
    else:
        task_text = "–ó–∞–¥–∞–Ω–∏–µ:\n {channels_repr}\n" \
                    "2) –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.".format(channels_repr=markup_channels_list_to_user(bot, channels))
        bot.send_message(
            chat_id=user_data["chat_id"],
            text=task_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text="–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
                    callback_data="get_money",
                )],
            ])
        )


@run_async
def referrals(bot: Bot, user_data: dict):
    link = get_invitation_link(user_data["id"])
    if check_give_key(user_data):
        bot.send_message(
            chat_id=user_data["chat_id"],
            text="–ü–æ–ª—É—á–∞–π –∫–ª—é—á –∑–∞ –∫–∞–∂–¥—ã—Ö 3-—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É\n{link}\n\n"
                 "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {invited}\n"
                 "–ö–ª—é—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {keys}".format(link=link,
                                                  invited=get_invited_users_count(user_data),
                                                  keys=get_count_keys_by_user(user_data)),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                text='–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á',
                callback_data=give_key(bot, user_data),
            )]]),
            parse_mode=ParseMode.HTML,
        )
    else:
        bot.send_message(
            chat_id=user_data["chat_id"],
            text="–ü–æ–ª—É—á–∞–π –∫–ª—é—á –∑–∞ –∫–∞–∂–¥—ã—Ö 3-—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É\n{link}\n\n"
                 "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {invited}\n"
                 "–ö–ª—é—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {keys}".format(link=link,
                                                  invited=get_invited_users_count(user_data),
                                                  keys=get_count_keys_by_user(user_data)),
            parse_mode=ParseMode.HTML,
        )


@run_async
def subscription_not_completed(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data["chat_id"],
        text="‚ùå –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ"
    )


@run_async
def keys_site(bot: Bot, user_data: dict):
    bot.send_message(
        chat_id=user_data['chat_id'],
        text='–ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Å–∞–π—Ç –∏ –∑–∞–±–∏—Ä–∞–π –∫–ª—é—á–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π 90 %',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–ñ–º–∏', url='http://slivkeys.ru/')]])
    )

#view_post_service.set_task_completed_callback(task_completed)


@run_async
def give_key(bot: Bot, user_data: dict):
    key = get_key()
    bot.send_message(
        chat_id=user_data['chat_id'],
        text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –≤–∞—à –∫–ª—é—á: {key}'.format(key=key.key)
    )
    delete_key(key.key)
    set_subs_mode(user_data)


